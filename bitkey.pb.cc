// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bitkey.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Initialize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Initialize_reflection_ = NULL;
const ::google::protobuf::Descriptor* Features_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Features_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugLinkDecision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugLinkDecision_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugLinkGetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugLinkGetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugLinkState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugLinkState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Success_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Success_reflection_ = NULL;
const ::google::protobuf::Descriptor* Failure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Failure_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* UUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtpAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtpAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtpCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtpCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PinAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PinAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PinCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PinCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEntropy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEntropy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entropy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entropy_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetMaxFeeKb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMaxFeeKb_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMasterPublicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMasterPublicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterPublicKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterPublicKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxOutput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Algorithm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScriptType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bitkey_2eproto() {
  protobuf_AddDesc_bitkey_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bitkey.proto");
  GOOGLE_CHECK(file != NULL);
  Initialize_descriptor_ = file->message_type(0);
  static const int Initialize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, session_id_),
  };
  Initialize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Initialize_descriptor_,
      Initialize::default_instance_,
      Initialize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Initialize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Initialize));
  Features_descriptor_ = file->message_type(1);
  static const int Features_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, major_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, minor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, has_otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, has_spv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, algo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, algo_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, maxfee_kb_),
  };
  Features_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Features_descriptor_,
      Features::default_instance_,
      Features_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Features, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Features));
  Ping_descriptor_ = file->message_type(2);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, message_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  DebugLinkDecision_descriptor_ = file->message_type(3);
  static const int DebugLinkDecision_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkDecision, yes_no_),
  };
  DebugLinkDecision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugLinkDecision_descriptor_,
      DebugLinkDecision::default_instance_,
      DebugLinkDecision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkDecision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkDecision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugLinkDecision));
  DebugLinkGetState_descriptor_ = file->message_type(4);
  static const int DebugLinkGetState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkGetState, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkGetState, otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkGetState, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkGetState, seed_),
  };
  DebugLinkGetState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugLinkGetState_descriptor_,
      DebugLinkGetState::default_instance_,
      DebugLinkGetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkGetState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkGetState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugLinkGetState));
  DebugLinkState_descriptor_ = file->message_type(5);
  static const int DebugLinkState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkState, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkState, otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkState, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkState, seed_),
  };
  DebugLinkState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DebugLinkState_descriptor_,
      DebugLinkState::default_instance_,
      DebugLinkState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLinkState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DebugLinkState));
  Success_descriptor_ = file->message_type(6);
  static const int Success_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, message_),
  };
  Success_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Success_descriptor_,
      Success::default_instance_,
      Success_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Success));
  Failure_descriptor_ = file->message_type(7);
  static const int Failure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, message_),
  };
  Failure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Failure_descriptor_,
      Failure::default_instance_,
      Failure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Failure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Failure));
  GetUUID_descriptor_ = file->message_type(8);
  static const int GetUUID_offsets_[1] = {
  };
  GetUUID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUUID_descriptor_,
      GetUUID::default_instance_,
      GetUUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUUID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUUID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUUID));
  UUID_descriptor_ = file->message_type(9);
  static const int UUID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, uuid_),
  };
  UUID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UUID_descriptor_,
      UUID::default_instance_,
      UUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UUID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UUID));
  ButtonRequest_descriptor_ = file->message_type(10);
  static const int ButtonRequest_offsets_[1] = {
  };
  ButtonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonRequest_descriptor_,
      ButtonRequest::default_instance_,
      ButtonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonRequest));
  ButtonAck_descriptor_ = file->message_type(11);
  static const int ButtonAck_offsets_[1] = {
  };
  ButtonAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonAck_descriptor_,
      ButtonAck::default_instance_,
      ButtonAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonAck));
  ButtonCancel_descriptor_ = file->message_type(12);
  static const int ButtonCancel_offsets_[1] = {
  };
  ButtonCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonCancel_descriptor_,
      ButtonCancel::default_instance_,
      ButtonCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonCancel));
  OtpRequest_descriptor_ = file->message_type(13);
  static const int OtpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpRequest, message_),
  };
  OtpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtpRequest_descriptor_,
      OtpRequest::default_instance_,
      OtpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtpRequest));
  OtpAck_descriptor_ = file->message_type(14);
  static const int OtpAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpAck, otp_),
  };
  OtpAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtpAck_descriptor_,
      OtpAck::default_instance_,
      OtpAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtpAck));
  OtpCancel_descriptor_ = file->message_type(15);
  static const int OtpCancel_offsets_[1] = {
  };
  OtpCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtpCancel_descriptor_,
      OtpCancel::default_instance_,
      OtpCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtpCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtpCancel));
  PinRequest_descriptor_ = file->message_type(16);
  static const int PinRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinRequest, message_),
  };
  PinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PinRequest_descriptor_,
      PinRequest::default_instance_,
      PinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PinRequest));
  PinAck_descriptor_ = file->message_type(17);
  static const int PinAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinAck, pin_),
  };
  PinAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PinAck_descriptor_,
      PinAck::default_instance_,
      PinAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PinAck));
  PinCancel_descriptor_ = file->message_type(18);
  static const int PinCancel_offsets_[1] = {
  };
  PinCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PinCancel_descriptor_,
      PinCancel::default_instance_,
      PinCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PinCancel));
  GetEntropy_descriptor_ = file->message_type(19);
  static const int GetEntropy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEntropy, size_),
  };
  GetEntropy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEntropy_descriptor_,
      GetEntropy::default_instance_,
      GetEntropy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEntropy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEntropy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEntropy));
  Entropy_descriptor_ = file->message_type(20);
  static const int Entropy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entropy, entropy_),
  };
  Entropy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entropy_descriptor_,
      Entropy::default_instance_,
      Entropy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entropy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entropy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entropy));
  SetMaxFeeKb_descriptor_ = file->message_type(21);
  static const int SetMaxFeeKb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMaxFeeKb, maxfee_kb_),
  };
  SetMaxFeeKb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetMaxFeeKb_descriptor_,
      SetMaxFeeKb::default_instance_,
      SetMaxFeeKb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMaxFeeKb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMaxFeeKb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetMaxFeeKb));
  GetMasterPublicKey_descriptor_ = file->message_type(22);
  static const int GetMasterPublicKey_offsets_[1] = {
  };
  GetMasterPublicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMasterPublicKey_descriptor_,
      GetMasterPublicKey::default_instance_,
      GetMasterPublicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMasterPublicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMasterPublicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMasterPublicKey));
  MasterPublicKey_descriptor_ = file->message_type(23);
  static const int MasterPublicKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPublicKey, key_),
  };
  MasterPublicKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterPublicKey_descriptor_,
      MasterPublicKey::default_instance_,
      MasterPublicKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPublicKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterPublicKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterPublicKey));
  GetAddress_descriptor_ = file->message_type(24);
  static const int GetAddress_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddress, address_n_),
  };
  GetAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAddress_descriptor_,
      GetAddress::default_instance_,
      GetAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAddress));
  Address_descriptor_ = file->message_type(25);
  static const int Address_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, address_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  LoadDevice_descriptor_ = file->message_type(26);
  static const int LoadDevice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, otp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, spv_),
  };
  LoadDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadDevice_descriptor_,
      LoadDevice::default_instance_,
      LoadDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadDevice));
  ResetDevice_descriptor_ = file->message_type(27);
  static const int ResetDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, random_),
  };
  ResetDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetDevice_descriptor_,
      ResetDevice::default_instance_,
      ResetDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetDevice));
  SignTx_descriptor_ = file->message_type(28);
  static const int SignTx_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTx, outputs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTx, inputs_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTx, random_),
  };
  SignTx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignTx_descriptor_,
      SignTx::default_instance_,
      SignTx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignTx));
  TxRequest_descriptor_ = file->message_type(29);
  static const int TxRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, request_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, signed_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, serialized_tx_),
  };
  TxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxRequest_descriptor_,
      TxRequest::default_instance_,
      TxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxRequest));
  TxInput_descriptor_ = file->message_type(30);
  static const int TxInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, address_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, prev_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, prev_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, script_sig_),
  };
  TxInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxInput_descriptor_,
      TxInput::default_instance_,
      TxInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxInput));
  TxOutput_descriptor_ = file->message_type(31);
  static const int TxOutput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, address_n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, script_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, script_args_),
  };
  TxOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TxOutput_descriptor_,
      TxOutput::default_instance_,
      TxOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TxOutput));
  Algorithm_descriptor_ = file->enum_type(0);
  ScriptType_descriptor_ = file->enum_type(1);
  RequestType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bitkey_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Initialize_descriptor_, &Initialize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Features_descriptor_, &Features::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugLinkDecision_descriptor_, &DebugLinkDecision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugLinkGetState_descriptor_, &DebugLinkGetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DebugLinkState_descriptor_, &DebugLinkState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Success_descriptor_, &Success::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Failure_descriptor_, &Failure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUUID_descriptor_, &GetUUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UUID_descriptor_, &UUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonRequest_descriptor_, &ButtonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonAck_descriptor_, &ButtonAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonCancel_descriptor_, &ButtonCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtpRequest_descriptor_, &OtpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtpAck_descriptor_, &OtpAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtpCancel_descriptor_, &OtpCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PinRequest_descriptor_, &PinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PinAck_descriptor_, &PinAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PinCancel_descriptor_, &PinCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEntropy_descriptor_, &GetEntropy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entropy_descriptor_, &Entropy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetMaxFeeKb_descriptor_, &SetMaxFeeKb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMasterPublicKey_descriptor_, &GetMasterPublicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterPublicKey_descriptor_, &MasterPublicKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAddress_descriptor_, &GetAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadDevice_descriptor_, &LoadDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetDevice_descriptor_, &ResetDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignTx_descriptor_, &SignTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxRequest_descriptor_, &TxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxInput_descriptor_, &TxInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TxOutput_descriptor_, &TxOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bitkey_2eproto() {
  delete Initialize::default_instance_;
  delete Initialize_reflection_;
  delete Features::default_instance_;
  delete Features_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete DebugLinkDecision::default_instance_;
  delete DebugLinkDecision_reflection_;
  delete DebugLinkGetState::default_instance_;
  delete DebugLinkGetState_reflection_;
  delete DebugLinkState::default_instance_;
  delete DebugLinkState_reflection_;
  delete Success::default_instance_;
  delete Success_reflection_;
  delete Failure::default_instance_;
  delete Failure_reflection_;
  delete GetUUID::default_instance_;
  delete GetUUID_reflection_;
  delete UUID::default_instance_;
  delete UUID_reflection_;
  delete ButtonRequest::default_instance_;
  delete ButtonRequest_reflection_;
  delete ButtonAck::default_instance_;
  delete ButtonAck_reflection_;
  delete ButtonCancel::default_instance_;
  delete ButtonCancel_reflection_;
  delete OtpRequest::default_instance_;
  delete OtpRequest_reflection_;
  delete OtpAck::default_instance_;
  delete OtpAck_reflection_;
  delete OtpCancel::default_instance_;
  delete OtpCancel_reflection_;
  delete PinRequest::default_instance_;
  delete PinRequest_reflection_;
  delete PinAck::default_instance_;
  delete PinAck_reflection_;
  delete PinCancel::default_instance_;
  delete PinCancel_reflection_;
  delete GetEntropy::default_instance_;
  delete GetEntropy_reflection_;
  delete Entropy::default_instance_;
  delete Entropy_reflection_;
  delete SetMaxFeeKb::default_instance_;
  delete SetMaxFeeKb_reflection_;
  delete GetMasterPublicKey::default_instance_;
  delete GetMasterPublicKey_reflection_;
  delete MasterPublicKey::default_instance_;
  delete MasterPublicKey_reflection_;
  delete GetAddress::default_instance_;
  delete GetAddress_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete LoadDevice::default_instance_;
  delete LoadDevice_reflection_;
  delete ResetDevice::default_instance_;
  delete ResetDevice_reflection_;
  delete SignTx::default_instance_;
  delete SignTx_reflection_;
  delete TxRequest::default_instance_;
  delete TxRequest_reflection_;
  delete TxInput::default_instance_;
  delete TxInput_reflection_;
  delete TxOutput::default_instance_;
  delete TxOutput_reflection_;
}

void protobuf_AddDesc_bitkey_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014bitkey.proto\" \n\nInitialize\022\022\n\nsession_"
    "id\030\001 \002(\014\"\334\001\n\010Features\022\022\n\nsession_id\030\001 \001("
    "\014\022\016\n\006vendor\030\002 \001(\t\022\025\n\rmajor_version\030\003 \001(\r"
    "\022\025\n\rminor_version\030\004 \001(\r\022\017\n\007has_otp\030\005 \001(\010"
    "\022\017\n\007has_spv\030\006 \001(\010\022\013\n\003pin\030\007 \001(\010\022\030\n\004algo\030\010"
    " \001(\0162\n.Algorithm\022\"\n\016algo_available\030\t \003(\016"
    "2\n.Algorithm\022\021\n\tmaxfee_kb\030\n \001(\004\"\027\n\004Ping\022"
    "\017\n\007message\030\001 \001(\t\"#\n\021DebugLinkDecision\022\016\n"
    "\006yes_no\030\001 \002(\010\"K\n\021DebugLinkGetState\022\016\n\006la"
    "yout\030\001 \001(\010\022\013\n\003otp\030\002 \001(\010\022\013\n\003pin\030\003 \001(\010\022\014\n\004"
    "seed\030\004 \001(\010\"Z\n\016DebugLinkState\022\016\n\006layout\030\001"
    " \001(\014\022\024\n\003otp\030\002 \001(\0132\007.OtpAck\022\024\n\003pin\030\003 \001(\0132"
    "\007.PinAck\022\014\n\004seed\030\004 \001(\t\"\032\n\007Success\022\017\n\007mes"
    "sage\030\001 \001(\t\"(\n\007Failure\022\014\n\004code\030\001 \001(\005\022\017\n\007m"
    "essage\030\002 \001(\t\"\t\n\007GetUUID\"\024\n\004UUID\022\014\n\004UUID\030"
    "\001 \002(\014\"\017\n\rButtonRequest\"\013\n\tButtonAck\"\016\n\014B"
    "uttonCancel\"\035\n\nOtpRequest\022\017\n\007message\030\001 \001"
    "(\t\"\025\n\006OtpAck\022\013\n\003otp\030\001 \002(\t\"\013\n\tOtpCancel\"\035"
    "\n\nPinRequest\022\017\n\007message\030\001 \001(\t\"\025\n\006PinAck\022"
    "\013\n\003pin\030\001 \002(\t\"\013\n\tPinCancel\"\032\n\nGetEntropy\022"
    "\014\n\004size\030\001 \002(\r\"\032\n\007Entropy\022\017\n\007entropy\030\001 \002("
    "\014\" \n\013SetMaxFeeKb\022\021\n\tmaxfee_kb\030\001 \002(\004\"\024\n\022G"
    "etMasterPublicKey\"\036\n\017MasterPublicKey\022\013\n\003"
    "key\030\001 \002(\014\"\037\n\nGetAddress\022\021\n\taddress_n\030\001 \003"
    "(\r\"\032\n\007Address\022\017\n\007address\030\001 \002(\t\"M\n\nLoadDe"
    "vice\022\014\n\004seed\030\001 \002(\t\022\021\n\003otp\030\002 \001(\010:\004true\022\013\n"
    "\003pin\030\003 \001(\t\022\021\n\003spv\030\004 \001(\010:\004true\"\035\n\013ResetDe"
    "vice\022\016\n\006random\030\007 \001(\014\"E\n\006SignTx\022\025\n\routput"
    "s_count\030\003 \002(\r\022\024\n\014inputs_count\030\005 \002(\r\022\016\n\006r"
    "andom\030\006 \001(\014\"\206\001\n\tTxRequest\022\025\n\rrequest_ind"
    "ex\030\001 \001(\005\022\"\n\014request_type\030\002 \001(\0162\014.Request"
    "Type\022\024\n\014signed_index\030\003 \001(\005\022\021\n\tsignature\030"
    "\004 \001(\014\022\025\n\rserialized_tx\030\005 \001(\014\"v\n\007TxInput\022"
    "\r\n\005index\030\001 \002(\r\022\021\n\taddress_n\030\002 \003(\r\022\016\n\006amo"
    "unt\030\003 \002(\004\022\021\n\tprev_hash\030\004 \002(\014\022\022\n\nprev_ind"
    "ex\030\005 \002(\r\022\022\n\nscript_sig\030\006 \001(\014\"\204\001\n\010TxOutpu"
    "t\022\r\n\005index\030\001 \002(\r\022\017\n\007address\030\002 \002(\t\022\021\n\tadd"
    "ress_n\030\003 \003(\r\022\016\n\006amount\030\004 \002(\004\022 \n\013script_t"
    "ype\030\005 \002(\0162\013.ScriptType\022\023\n\013script_args\030\006 "
    "\003(\014*$\n\tAlgorithm\022\t\n\005BIP32\020\000\022\014\n\010ELECTRUM\020"
    "\001*3\n\nScriptType\022\020\n\014PAYTOADDRESS\020\000\022\023\n\017PAY"
    "TOSCRIPTHASH\020\001*(\n\013RequestType\022\013\n\007TXINPUT"
    "\020\000\022\014\n\010TXOUTPUT\020\001", 1696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bitkey.proto", &protobuf_RegisterTypes);
  Initialize::default_instance_ = new Initialize();
  Features::default_instance_ = new Features();
  Ping::default_instance_ = new Ping();
  DebugLinkDecision::default_instance_ = new DebugLinkDecision();
  DebugLinkGetState::default_instance_ = new DebugLinkGetState();
  DebugLinkState::default_instance_ = new DebugLinkState();
  Success::default_instance_ = new Success();
  Failure::default_instance_ = new Failure();
  GetUUID::default_instance_ = new GetUUID();
  UUID::default_instance_ = new UUID();
  ButtonRequest::default_instance_ = new ButtonRequest();
  ButtonAck::default_instance_ = new ButtonAck();
  ButtonCancel::default_instance_ = new ButtonCancel();
  OtpRequest::default_instance_ = new OtpRequest();
  OtpAck::default_instance_ = new OtpAck();
  OtpCancel::default_instance_ = new OtpCancel();
  PinRequest::default_instance_ = new PinRequest();
  PinAck::default_instance_ = new PinAck();
  PinCancel::default_instance_ = new PinCancel();
  GetEntropy::default_instance_ = new GetEntropy();
  Entropy::default_instance_ = new Entropy();
  SetMaxFeeKb::default_instance_ = new SetMaxFeeKb();
  GetMasterPublicKey::default_instance_ = new GetMasterPublicKey();
  MasterPublicKey::default_instance_ = new MasterPublicKey();
  GetAddress::default_instance_ = new GetAddress();
  Address::default_instance_ = new Address();
  LoadDevice::default_instance_ = new LoadDevice();
  ResetDevice::default_instance_ = new ResetDevice();
  SignTx::default_instance_ = new SignTx();
  TxRequest::default_instance_ = new TxRequest();
  TxInput::default_instance_ = new TxInput();
  TxOutput::default_instance_ = new TxOutput();
  Initialize::default_instance_->InitAsDefaultInstance();
  Features::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  DebugLinkDecision::default_instance_->InitAsDefaultInstance();
  DebugLinkGetState::default_instance_->InitAsDefaultInstance();
  DebugLinkState::default_instance_->InitAsDefaultInstance();
  Success::default_instance_->InitAsDefaultInstance();
  Failure::default_instance_->InitAsDefaultInstance();
  GetUUID::default_instance_->InitAsDefaultInstance();
  UUID::default_instance_->InitAsDefaultInstance();
  ButtonRequest::default_instance_->InitAsDefaultInstance();
  ButtonAck::default_instance_->InitAsDefaultInstance();
  ButtonCancel::default_instance_->InitAsDefaultInstance();
  OtpRequest::default_instance_->InitAsDefaultInstance();
  OtpAck::default_instance_->InitAsDefaultInstance();
  OtpCancel::default_instance_->InitAsDefaultInstance();
  PinRequest::default_instance_->InitAsDefaultInstance();
  PinAck::default_instance_->InitAsDefaultInstance();
  PinCancel::default_instance_->InitAsDefaultInstance();
  GetEntropy::default_instance_->InitAsDefaultInstance();
  Entropy::default_instance_->InitAsDefaultInstance();
  SetMaxFeeKb::default_instance_->InitAsDefaultInstance();
  GetMasterPublicKey::default_instance_->InitAsDefaultInstance();
  MasterPublicKey::default_instance_->InitAsDefaultInstance();
  GetAddress::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  LoadDevice::default_instance_->InitAsDefaultInstance();
  ResetDevice::default_instance_->InitAsDefaultInstance();
  SignTx::default_instance_->InitAsDefaultInstance();
  TxRequest::default_instance_->InitAsDefaultInstance();
  TxInput::default_instance_->InitAsDefaultInstance();
  TxOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bitkey_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bitkey_2eproto {
  StaticDescriptorInitializer_bitkey_2eproto() {
    protobuf_AddDesc_bitkey_2eproto();
  }
} static_descriptor_initializer_bitkey_2eproto_;

const ::google::protobuf::EnumDescriptor* Algorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Algorithm_descriptor_;
}
bool Algorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScriptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScriptType_descriptor_;
}
bool ScriptType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Initialize::kSessionIdFieldNumber;
#endif  // !_MSC_VER

Initialize::Initialize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Initialize::InitAsDefaultInstance() {
}

Initialize::Initialize(const Initialize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Initialize::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Initialize::~Initialize() {
  SharedDtor();
}

void Initialize::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void Initialize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Initialize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Initialize_descriptor_;
}

const Initialize& Initialize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Initialize* Initialize::default_instance_ = NULL;

Initialize* Initialize::New() const {
  return new Initialize;
}

void Initialize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Initialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Initialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->session_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Initialize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes session_id = 1;
  if (has_session_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->session_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Initialize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Initialize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Initialize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Initialize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Initialize::MergeFrom(const Initialize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Initialize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Initialize::CopyFrom(const Initialize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Initialize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Initialize::Swap(Initialize* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Initialize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Initialize_descriptor_;
  metadata.reflection = Initialize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Features::kSessionIdFieldNumber;
const int Features::kVendorFieldNumber;
const int Features::kMajorVersionFieldNumber;
const int Features::kMinorVersionFieldNumber;
const int Features::kHasOtpFieldNumber;
const int Features::kHasSpvFieldNumber;
const int Features::kPinFieldNumber;
const int Features::kAlgoFieldNumber;
const int Features::kAlgoAvailableFieldNumber;
const int Features::kMaxfeeKbFieldNumber;
#endif  // !_MSC_VER

Features::Features()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Features::InitAsDefaultInstance() {
}

Features::Features(const Features& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Features::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  major_version_ = 0u;
  minor_version_ = 0u;
  has_otp_ = false;
  has_spv_ = false;
  pin_ = false;
  algo_ = 0;
  maxfee_kb_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Features::~Features() {
  SharedDtor();
}

void Features::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (vendor_ != &::google::protobuf::internal::kEmptyString) {
    delete vendor_;
  }
  if (this != default_instance_) {
  }
}

void Features::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Features::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Features_descriptor_;
}

const Features& Features::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Features* Features::default_instance_ = NULL;

Features* Features::New() const {
  return new Features;
}

void Features::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::kEmptyString) {
        vendor_->clear();
      }
    }
    major_version_ = 0u;
    minor_version_ = 0u;
    has_otp_ = false;
    has_spv_ = false;
    pin_ = false;
    algo_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    maxfee_kb_ = GOOGLE_ULONGLONG(0);
  }
  algo_available_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vendor;
        break;
      }
      
      // optional string vendor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_major_version;
        break;
      }
      
      // optional uint32 major_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minor_version;
        break;
      }
      
      // optional uint32 minor_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_has_otp;
        break;
      }
      
      // optional bool has_otp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_otp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_otp_)));
          set_has_has_otp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_has_spv;
        break;
      }
      
      // optional bool has_spv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_spv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_spv_)));
          set_has_has_spv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pin;
        break;
      }
      
      // optional bool pin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_)));
          set_has_pin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_algo;
        break;
      }
      
      // optional .Algorithm algo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algo:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Algorithm_IsValid(value)) {
            set_algo(static_cast< Algorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_algo_available;
        break;
      }
      
      // repeated .Algorithm algo_available = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algo_available:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Algorithm_IsValid(value)) {
            add_algo_available(static_cast< Algorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &Algorithm_IsValid,
                 this->mutable_algo_available())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_algo_available;
        if (input->ExpectTag(80)) goto parse_maxfee_kb;
        break;
      }
      
      // optional uint64 maxfee_kb = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxfee_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfee_kb_)));
          set_has_maxfee_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->session_id(), output);
  }
  
  // optional string vendor = 2;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vendor(), output);
  }
  
  // optional uint32 major_version = 3;
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->major_version(), output);
  }
  
  // optional uint32 minor_version = 4;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->minor_version(), output);
  }
  
  // optional bool has_otp = 5;
  if (has_has_otp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_otp(), output);
  }
  
  // optional bool has_spv = 6;
  if (has_has_spv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_spv(), output);
  }
  
  // optional bool pin = 7;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pin(), output);
  }
  
  // optional .Algorithm algo = 8;
  if (has_algo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->algo(), output);
  }
  
  // repeated .Algorithm algo_available = 9;
  for (int i = 0; i < this->algo_available_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->algo_available(i), output);
  }
  
  // optional uint64 maxfee_kb = 10;
  if (has_maxfee_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->maxfee_kb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Features::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes session_id = 1;
  if (has_session_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->session_id(), target);
  }
  
  // optional string vendor = 2;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vendor(), target);
  }
  
  // optional uint32 major_version = 3;
  if (has_major_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->major_version(), target);
  }
  
  // optional uint32 minor_version = 4;
  if (has_minor_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->minor_version(), target);
  }
  
  // optional bool has_otp = 5;
  if (has_has_otp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_otp(), target);
  }
  
  // optional bool has_spv = 6;
  if (has_has_spv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_spv(), target);
  }
  
  // optional bool pin = 7;
  if (has_pin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pin(), target);
  }
  
  // optional .Algorithm algo = 8;
  if (has_algo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->algo(), target);
  }
  
  // repeated .Algorithm algo_available = 9;
  for (int i = 0; i < this->algo_available_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->algo_available(i), target);
  }
  
  // optional uint64 maxfee_kb = 10;
  if (has_maxfee_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->maxfee_kb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Features::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_id());
    }
    
    // optional string vendor = 2;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }
    
    // optional uint32 major_version = 3;
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major_version());
    }
    
    // optional uint32 minor_version = 4;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_version());
    }
    
    // optional bool has_otp = 5;
    if (has_has_otp()) {
      total_size += 1 + 1;
    }
    
    // optional bool has_spv = 6;
    if (has_has_spv()) {
      total_size += 1 + 1;
    }
    
    // optional bool pin = 7;
    if (has_pin()) {
      total_size += 1 + 1;
    }
    
    // optional .Algorithm algo = 8;
    if (has_algo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algo());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint64 maxfee_kb = 10;
    if (has_maxfee_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfee_kb());
    }
    
  }
  // repeated .Algorithm algo_available = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->algo_available_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->algo_available(i));
    }
    total_size += 1 * this->algo_available_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Features::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Features* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Features*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Features::MergeFrom(const Features& from) {
  GOOGLE_CHECK_NE(&from, this);
  algo_available_.MergeFrom(from.algo_available_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_has_otp()) {
      set_has_otp(from.has_otp());
    }
    if (from.has_has_spv()) {
      set_has_spv(from.has_spv());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_algo()) {
      set_algo(from.algo());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_maxfee_kb()) {
      set_maxfee_kb(from.maxfee_kb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Features::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Features::CopyFrom(const Features& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Features::IsInitialized() const {
  
  return true;
}

void Features::Swap(Features* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(vendor_, other->vendor_);
    std::swap(major_version_, other->major_version_);
    std::swap(minor_version_, other->minor_version_);
    std::swap(has_otp_, other->has_otp_);
    std::swap(has_spv_, other->has_spv_);
    std::swap(pin_, other->pin_);
    std::swap(algo_, other->algo_);
    algo_available_.Swap(&other->algo_available_);
    std::swap(maxfee_kb_, other->maxfee_kb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Features::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Features_descriptor_;
  metadata.reflection = Features_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ping::kMessageFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ping::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  SharedDtor();
}

void Ping::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  
  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugLinkDecision::kYesNoFieldNumber;
#endif  // !_MSC_VER

DebugLinkDecision::DebugLinkDecision()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugLinkDecision::InitAsDefaultInstance() {
}

DebugLinkDecision::DebugLinkDecision(const DebugLinkDecision& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugLinkDecision::SharedCtor() {
  _cached_size_ = 0;
  yes_no_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugLinkDecision::~DebugLinkDecision() {
  SharedDtor();
}

void DebugLinkDecision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugLinkDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugLinkDecision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugLinkDecision_descriptor_;
}

const DebugLinkDecision& DebugLinkDecision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

DebugLinkDecision* DebugLinkDecision::default_instance_ = NULL;

DebugLinkDecision* DebugLinkDecision::New() const {
  return new DebugLinkDecision;
}

void DebugLinkDecision::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yes_no_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugLinkDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool yes_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yes_no_)));
          set_has_yes_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugLinkDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool yes_no = 1;
  if (has_yes_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->yes_no(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugLinkDecision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool yes_no = 1;
  if (has_yes_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->yes_no(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugLinkDecision::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool yes_no = 1;
    if (has_yes_no()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugLinkDecision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugLinkDecision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugLinkDecision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugLinkDecision::MergeFrom(const DebugLinkDecision& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yes_no()) {
      set_yes_no(from.yes_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugLinkDecision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLinkDecision::CopyFrom(const DebugLinkDecision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLinkDecision::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DebugLinkDecision::Swap(DebugLinkDecision* other) {
  if (other != this) {
    std::swap(yes_no_, other->yes_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugLinkDecision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugLinkDecision_descriptor_;
  metadata.reflection = DebugLinkDecision_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugLinkGetState::kLayoutFieldNumber;
const int DebugLinkGetState::kOtpFieldNumber;
const int DebugLinkGetState::kPinFieldNumber;
const int DebugLinkGetState::kSeedFieldNumber;
#endif  // !_MSC_VER

DebugLinkGetState::DebugLinkGetState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugLinkGetState::InitAsDefaultInstance() {
}

DebugLinkGetState::DebugLinkGetState(const DebugLinkGetState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugLinkGetState::SharedCtor() {
  _cached_size_ = 0;
  layout_ = false;
  otp_ = false;
  pin_ = false;
  seed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugLinkGetState::~DebugLinkGetState() {
  SharedDtor();
}

void DebugLinkGetState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugLinkGetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugLinkGetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugLinkGetState_descriptor_;
}

const DebugLinkGetState& DebugLinkGetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

DebugLinkGetState* DebugLinkGetState::default_instance_ = NULL;

DebugLinkGetState* DebugLinkGetState::New() const {
  return new DebugLinkGetState;
}

void DebugLinkGetState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layout_ = false;
    otp_ = false;
    pin_ = false;
    seed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugLinkGetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool layout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layout_)));
          set_has_layout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_otp;
        break;
      }
      
      // optional bool otp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &otp_)));
          set_has_otp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pin;
        break;
      }
      
      // optional bool pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pin_)));
          set_has_pin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seed;
        break;
      }
      
      // optional bool seed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugLinkGetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool layout = 1;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->layout(), output);
  }
  
  // optional bool otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->otp(), output);
  }
  
  // optional bool pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pin(), output);
  }
  
  // optional bool seed = 4;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->seed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugLinkGetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool layout = 1;
  if (has_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->layout(), target);
  }
  
  // optional bool otp = 2;
  if (has_otp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->otp(), target);
  }
  
  // optional bool pin = 3;
  if (has_pin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pin(), target);
  }
  
  // optional bool seed = 4;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->seed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugLinkGetState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool layout = 1;
    if (has_layout()) {
      total_size += 1 + 1;
    }
    
    // optional bool otp = 2;
    if (has_otp()) {
      total_size += 1 + 1;
    }
    
    // optional bool pin = 3;
    if (has_pin()) {
      total_size += 1 + 1;
    }
    
    // optional bool seed = 4;
    if (has_seed()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugLinkGetState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugLinkGetState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugLinkGetState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugLinkGetState::MergeFrom(const DebugLinkGetState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugLinkGetState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLinkGetState::CopyFrom(const DebugLinkGetState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLinkGetState::IsInitialized() const {
  
  return true;
}

void DebugLinkGetState::Swap(DebugLinkGetState* other) {
  if (other != this) {
    std::swap(layout_, other->layout_);
    std::swap(otp_, other->otp_);
    std::swap(pin_, other->pin_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugLinkGetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugLinkGetState_descriptor_;
  metadata.reflection = DebugLinkGetState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DebugLinkState::kLayoutFieldNumber;
const int DebugLinkState::kOtpFieldNumber;
const int DebugLinkState::kPinFieldNumber;
const int DebugLinkState::kSeedFieldNumber;
#endif  // !_MSC_VER

DebugLinkState::DebugLinkState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DebugLinkState::InitAsDefaultInstance() {
  otp_ = const_cast< ::OtpAck*>(&::OtpAck::default_instance());
  pin_ = const_cast< ::PinAck*>(&::PinAck::default_instance());
}

DebugLinkState::DebugLinkState(const DebugLinkState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DebugLinkState::SharedCtor() {
  _cached_size_ = 0;
  layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_ = NULL;
  pin_ = NULL;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugLinkState::~DebugLinkState() {
  SharedDtor();
}

void DebugLinkState::SharedDtor() {
  if (layout_ != &::google::protobuf::internal::kEmptyString) {
    delete layout_;
  }
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (this != default_instance_) {
    delete otp_;
    delete pin_;
  }
}

void DebugLinkState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugLinkState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugLinkState_descriptor_;
}

const DebugLinkState& DebugLinkState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

DebugLinkState* DebugLinkState::default_instance_ = NULL;

DebugLinkState* DebugLinkState::New() const {
  return new DebugLinkState;
}

void DebugLinkState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layout()) {
      if (layout_ != &::google::protobuf::internal::kEmptyString) {
        layout_->clear();
      }
    }
    if (has_otp()) {
      if (otp_ != NULL) otp_->::OtpAck::Clear();
    }
    if (has_pin()) {
      if (pin_ != NULL) pin_->::PinAck::Clear();
    }
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DebugLinkState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes layout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_layout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otp;
        break;
      }
      
      // optional .OtpAck otp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }
      
      // optional .PinAck pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seed;
        break;
      }
      
      // optional string seed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebugLinkState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes layout = 1;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->layout(), output);
  }
  
  // optional .OtpAck otp = 2;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->otp(), output);
  }
  
  // optional .PinAck pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pin(), output);
  }
  
  // optional string seed = 4;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->seed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DebugLinkState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes layout = 1;
  if (has_layout()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->layout(), target);
  }
  
  // optional .OtpAck otp = 2;
  if (has_otp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->otp(), target);
  }
  
  // optional .PinAck pin = 3;
  if (has_pin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pin(), target);
  }
  
  // optional string seed = 4;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->seed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DebugLinkState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes layout = 1;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->layout());
    }
    
    // optional .OtpAck otp = 2;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->otp());
    }
    
    // optional .PinAck pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pin());
    }
    
    // optional string seed = 4;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugLinkState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DebugLinkState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DebugLinkState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DebugLinkState::MergeFrom(const DebugLinkState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_otp()) {
      mutable_otp()->::OtpAck::MergeFrom(from.otp());
    }
    if (from.has_pin()) {
      mutable_pin()->::PinAck::MergeFrom(from.pin());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DebugLinkState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLinkState::CopyFrom(const DebugLinkState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLinkState::IsInitialized() const {
  
  if (has_otp()) {
    if (!this->otp().IsInitialized()) return false;
  }
  if (has_pin()) {
    if (!this->pin().IsInitialized()) return false;
  }
  return true;
}

void DebugLinkState::Swap(DebugLinkState* other) {
  if (other != this) {
    std::swap(layout_, other->layout_);
    std::swap(otp_, other->otp_);
    std::swap(pin_, other->pin_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DebugLinkState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugLinkState_descriptor_;
  metadata.reflection = DebugLinkState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Success::kMessageFieldNumber;
#endif  // !_MSC_VER

Success::Success()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Success::InitAsDefaultInstance() {
}

Success::Success(const Success& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Success::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Success::~Success() {
  SharedDtor();
}

void Success::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Success::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Success_descriptor_;
}

const Success& Success::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Success* Success::default_instance_ = NULL;

Success* Success::New() const {
  return new Success;
}

void Success::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Success::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Success::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Success::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Success* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Success*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Success::MergeFrom(const Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Success::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Success::CopyFrom(const Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Success::IsInitialized() const {
  
  return true;
}

void Success::Swap(Success* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Success::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Success_descriptor_;
  metadata.reflection = Success_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Failure::kCodeFieldNumber;
const int Failure::kMessageFieldNumber;
#endif  // !_MSC_VER

Failure::Failure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Failure::InitAsDefaultInstance() {
}

Failure::Failure(const Failure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Failure::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Failure::~Failure() {
  SharedDtor();
}

void Failure::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Failure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Failure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Failure_descriptor_;
}

const Failure& Failure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Failure* Failure::default_instance_ = NULL;

Failure* Failure::New() const {
  return new Failure;
}

void Failure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Failure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Failure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Failure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Failure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Failure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Failure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Failure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Failure::MergeFrom(const Failure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Failure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failure::CopyFrom(const Failure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failure::IsInitialized() const {
  
  return true;
}

void Failure::Swap(Failure* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Failure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Failure_descriptor_;
  metadata.reflection = Failure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetUUID::GetUUID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUUID::InitAsDefaultInstance() {
}

GetUUID::GetUUID(const GetUUID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUUID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUUID::~GetUUID() {
  SharedDtor();
}

void GetUUID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUUID_descriptor_;
}

const GetUUID& GetUUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

GetUUID* GetUUID::default_instance_ = NULL;

GetUUID* GetUUID::New() const {
  return new GetUUID;
}

void GetUUID::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetUUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUUID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUUID::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUUID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUUID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUUID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUUID::MergeFrom(const GetUUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUUID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUUID::CopyFrom(const GetUUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUUID::IsInitialized() const {
  
  return true;
}

void GetUUID::Swap(GetUUID* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUUID_descriptor_;
  metadata.reflection = GetUUID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UUID::kUUIDFieldNumber;
#endif  // !_MSC_VER

UUID::UUID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UUID::InitAsDefaultInstance() {
}

UUID::UUID(const UUID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UUID::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UUID::~UUID() {
  SharedDtor();
}

void UUID::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void UUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UUID_descriptor_;
}

const UUID& UUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

UUID* UUID::default_instance_ = NULL;

UUID* UUID::New() const {
  return new UUID;
}

void UUID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes UUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes UUID = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UUID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes UUID = 1;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UUID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes UUID = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UUID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UUID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UUID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UUID::MergeFrom(const UUID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UUID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UUID::CopyFrom(const UUID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UUID::Swap(UUID* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UUID_descriptor_;
  metadata.reflection = UUID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ButtonRequest::ButtonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ButtonRequest::InitAsDefaultInstance() {
}

ButtonRequest::ButtonRequest(const ButtonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonRequest::~ButtonRequest() {
  SharedDtor();
}

void ButtonRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonRequest_descriptor_;
}

const ButtonRequest& ButtonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

ButtonRequest* ButtonRequest::default_instance_ = NULL;

ButtonRequest* ButtonRequest::New() const {
  return new ButtonRequest;
}

void ButtonRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ButtonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ButtonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ButtonRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonRequest::MergeFrom(const ButtonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonRequest::CopyFrom(const ButtonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonRequest::IsInitialized() const {
  
  return true;
}

void ButtonRequest::Swap(ButtonRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonRequest_descriptor_;
  metadata.reflection = ButtonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ButtonAck::ButtonAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ButtonAck::InitAsDefaultInstance() {
}

ButtonAck::ButtonAck(const ButtonAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonAck::~ButtonAck() {
  SharedDtor();
}

void ButtonAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonAck_descriptor_;
}

const ButtonAck& ButtonAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

ButtonAck* ButtonAck::default_instance_ = NULL;

ButtonAck* ButtonAck::New() const {
  return new ButtonAck;
}

void ButtonAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ButtonAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ButtonAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ButtonAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonAck::MergeFrom(const ButtonAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonAck::CopyFrom(const ButtonAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonAck::IsInitialized() const {
  
  return true;
}

void ButtonAck::Swap(ButtonAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonAck_descriptor_;
  metadata.reflection = ButtonAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ButtonCancel::ButtonCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ButtonCancel::InitAsDefaultInstance() {
}

ButtonCancel::ButtonCancel(const ButtonCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonCancel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonCancel::~ButtonCancel() {
  SharedDtor();
}

void ButtonCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonCancel_descriptor_;
}

const ButtonCancel& ButtonCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

ButtonCancel* ButtonCancel::default_instance_ = NULL;

ButtonCancel* ButtonCancel::New() const {
  return new ButtonCancel;
}

void ButtonCancel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ButtonCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ButtonCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ButtonCancel::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonCancel::MergeFrom(const ButtonCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonCancel::CopyFrom(const ButtonCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonCancel::IsInitialized() const {
  
  return true;
}

void ButtonCancel::Swap(ButtonCancel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonCancel_descriptor_;
  metadata.reflection = ButtonCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtpRequest::kMessageFieldNumber;
#endif  // !_MSC_VER

OtpRequest::OtpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtpRequest::InitAsDefaultInstance() {
}

OtpRequest::OtpRequest(const OtpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtpRequest::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtpRequest::~OtpRequest() {
  SharedDtor();
}

void OtpRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void OtpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtpRequest_descriptor_;
}

const OtpRequest& OtpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

OtpRequest* OtpRequest::default_instance_ = NULL;

OtpRequest* OtpRequest::New() const {
  return new OtpRequest;
}

void OtpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtpRequest::MergeFrom(const OtpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtpRequest::CopyFrom(const OtpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtpRequest::IsInitialized() const {
  
  return true;
}

void OtpRequest::Swap(OtpRequest* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtpRequest_descriptor_;
  metadata.reflection = OtpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtpAck::kOtpFieldNumber;
#endif  // !_MSC_VER

OtpAck::OtpAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtpAck::InitAsDefaultInstance() {
}

OtpAck::OtpAck(const OtpAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtpAck::SharedCtor() {
  _cached_size_ = 0;
  otp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtpAck::~OtpAck() {
  SharedDtor();
}

void OtpAck::SharedDtor() {
  if (otp_ != &::google::protobuf::internal::kEmptyString) {
    delete otp_;
  }
  if (this != default_instance_) {
  }
}

void OtpAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtpAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtpAck_descriptor_;
}

const OtpAck& OtpAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

OtpAck* OtpAck::default_instance_ = NULL;

OtpAck* OtpAck::New() const {
  return new OtpAck;
}

void OtpAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_otp()) {
      if (otp_ != &::google::protobuf::internal::kEmptyString) {
        otp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtpAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string otp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->otp().data(), this->otp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtpAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string otp = 1;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->otp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtpAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string otp = 1;
  if (has_otp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->otp().data(), this->otp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->otp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtpAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string otp = 1;
    if (has_otp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->otp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtpAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtpAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtpAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtpAck::MergeFrom(const OtpAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otp()) {
      set_otp(from.otp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtpAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtpAck::CopyFrom(const OtpAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtpAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OtpAck::Swap(OtpAck* other) {
  if (other != this) {
    std::swap(otp_, other->otp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtpAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtpAck_descriptor_;
  metadata.reflection = OtpAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OtpCancel::OtpCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtpCancel::InitAsDefaultInstance() {
}

OtpCancel::OtpCancel(const OtpCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtpCancel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtpCancel::~OtpCancel() {
  SharedDtor();
}

void OtpCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OtpCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtpCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtpCancel_descriptor_;
}

const OtpCancel& OtpCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

OtpCancel* OtpCancel::default_instance_ = NULL;

OtpCancel* OtpCancel::New() const {
  return new OtpCancel;
}

void OtpCancel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtpCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OtpCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtpCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtpCancel::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtpCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtpCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtpCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtpCancel::MergeFrom(const OtpCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtpCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtpCancel::CopyFrom(const OtpCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtpCancel::IsInitialized() const {
  
  return true;
}

void OtpCancel::Swap(OtpCancel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtpCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtpCancel_descriptor_;
  metadata.reflection = OtpCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PinRequest::kMessageFieldNumber;
#endif  // !_MSC_VER

PinRequest::PinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PinRequest::InitAsDefaultInstance() {
}

PinRequest::PinRequest(const PinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PinRequest::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinRequest::~PinRequest() {
  SharedDtor();
}

void PinRequest::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void PinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinRequest_descriptor_;
}

const PinRequest& PinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

PinRequest* PinRequest::default_instance_ = NULL;

PinRequest* PinRequest::New() const {
  return new PinRequest;
}

void PinRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PinRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PinRequest::MergeFrom(const PinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinRequest::CopyFrom(const PinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinRequest::IsInitialized() const {
  
  return true;
}

void PinRequest::Swap(PinRequest* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PinRequest_descriptor_;
  metadata.reflection = PinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PinAck::kPinFieldNumber;
#endif  // !_MSC_VER

PinAck::PinAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PinAck::InitAsDefaultInstance() {
}

PinAck::PinAck(const PinAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PinAck::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinAck::~PinAck() {
  SharedDtor();
}

void PinAck::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void PinAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PinAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinAck_descriptor_;
}

const PinAck& PinAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

PinAck* PinAck::default_instance_ = NULL;

PinAck* PinAck::New() const {
  return new PinAck;
}

void PinAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PinAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PinAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PinAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PinAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PinAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PinAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PinAck::MergeFrom(const PinAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PinAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinAck::CopyFrom(const PinAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PinAck::Swap(PinAck* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PinAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PinAck_descriptor_;
  metadata.reflection = PinAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PinCancel::PinCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PinCancel::InitAsDefaultInstance() {
}

PinCancel::PinCancel(const PinCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PinCancel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinCancel::~PinCancel() {
  SharedDtor();
}

void PinCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PinCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PinCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinCancel_descriptor_;
}

const PinCancel& PinCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

PinCancel* PinCancel::default_instance_ = NULL;

PinCancel* PinCancel::New() const {
  return new PinCancel;
}

void PinCancel::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PinCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PinCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PinCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PinCancel::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PinCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PinCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PinCancel::MergeFrom(const PinCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PinCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinCancel::CopyFrom(const PinCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinCancel::IsInitialized() const {
  
  return true;
}

void PinCancel::Swap(PinCancel* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PinCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PinCancel_descriptor_;
  metadata.reflection = PinCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEntropy::kSizeFieldNumber;
#endif  // !_MSC_VER

GetEntropy::GetEntropy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEntropy::InitAsDefaultInstance() {
}

GetEntropy::GetEntropy(const GetEntropy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEntropy::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEntropy::~GetEntropy() {
  SharedDtor();
}

void GetEntropy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEntropy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEntropy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEntropy_descriptor_;
}

const GetEntropy& GetEntropy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

GetEntropy* GetEntropy::default_instance_ = NULL;

GetEntropy* GetEntropy::New() const {
  return new GetEntropy;
}

void GetEntropy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEntropy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEntropy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEntropy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEntropy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEntropy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEntropy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEntropy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEntropy::MergeFrom(const GetEntropy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEntropy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEntropy::CopyFrom(const GetEntropy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEntropy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetEntropy::Swap(GetEntropy* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEntropy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEntropy_descriptor_;
  metadata.reflection = GetEntropy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entropy::kEntropyFieldNumber;
#endif  // !_MSC_VER

Entropy::Entropy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entropy::InitAsDefaultInstance() {
}

Entropy::Entropy(const Entropy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entropy::SharedCtor() {
  _cached_size_ = 0;
  entropy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entropy::~Entropy() {
  SharedDtor();
}

void Entropy::SharedDtor() {
  if (entropy_ != &::google::protobuf::internal::kEmptyString) {
    delete entropy_;
  }
  if (this != default_instance_) {
  }
}

void Entropy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entropy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entropy_descriptor_;
}

const Entropy& Entropy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Entropy* Entropy::default_instance_ = NULL;

Entropy* Entropy::New() const {
  return new Entropy;
}

void Entropy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entropy()) {
      if (entropy_ != &::google::protobuf::internal::kEmptyString) {
        entropy_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entropy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes entropy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entropy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entropy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes entropy = 1;
  if (has_entropy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->entropy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entropy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes entropy = 1;
  if (has_entropy()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entropy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entropy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes entropy = 1;
    if (has_entropy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entropy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entropy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entropy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entropy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entropy::MergeFrom(const Entropy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entropy()) {
      set_entropy(from.entropy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entropy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entropy::CopyFrom(const Entropy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entropy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Entropy::Swap(Entropy* other) {
  if (other != this) {
    std::swap(entropy_, other->entropy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entropy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entropy_descriptor_;
  metadata.reflection = Entropy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetMaxFeeKb::kMaxfeeKbFieldNumber;
#endif  // !_MSC_VER

SetMaxFeeKb::SetMaxFeeKb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetMaxFeeKb::InitAsDefaultInstance() {
}

SetMaxFeeKb::SetMaxFeeKb(const SetMaxFeeKb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetMaxFeeKb::SharedCtor() {
  _cached_size_ = 0;
  maxfee_kb_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMaxFeeKb::~SetMaxFeeKb() {
  SharedDtor();
}

void SetMaxFeeKb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetMaxFeeKb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMaxFeeKb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMaxFeeKb_descriptor_;
}

const SetMaxFeeKb& SetMaxFeeKb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

SetMaxFeeKb* SetMaxFeeKb::default_instance_ = NULL;

SetMaxFeeKb* SetMaxFeeKb::New() const {
  return new SetMaxFeeKb;
}

void SetMaxFeeKb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxfee_kb_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetMaxFeeKb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 maxfee_kb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfee_kb_)));
          set_has_maxfee_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetMaxFeeKb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 maxfee_kb = 1;
  if (has_maxfee_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->maxfee_kb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetMaxFeeKb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 maxfee_kb = 1;
  if (has_maxfee_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->maxfee_kb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetMaxFeeKb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 maxfee_kb = 1;
    if (has_maxfee_kb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfee_kb());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMaxFeeKb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetMaxFeeKb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetMaxFeeKb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetMaxFeeKb::MergeFrom(const SetMaxFeeKb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxfee_kb()) {
      set_maxfee_kb(from.maxfee_kb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetMaxFeeKb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMaxFeeKb::CopyFrom(const SetMaxFeeKb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaxFeeKb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetMaxFeeKb::Swap(SetMaxFeeKb* other) {
  if (other != this) {
    std::swap(maxfee_kb_, other->maxfee_kb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetMaxFeeKb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMaxFeeKb_descriptor_;
  metadata.reflection = SetMaxFeeKb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetMasterPublicKey::GetMasterPublicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMasterPublicKey::InitAsDefaultInstance() {
}

GetMasterPublicKey::GetMasterPublicKey(const GetMasterPublicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMasterPublicKey::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMasterPublicKey::~GetMasterPublicKey() {
  SharedDtor();
}

void GetMasterPublicKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMasterPublicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMasterPublicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMasterPublicKey_descriptor_;
}

const GetMasterPublicKey& GetMasterPublicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

GetMasterPublicKey* GetMasterPublicKey::default_instance_ = NULL;

GetMasterPublicKey* GetMasterPublicKey::New() const {
  return new GetMasterPublicKey;
}

void GetMasterPublicKey::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMasterPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetMasterPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMasterPublicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMasterPublicKey::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMasterPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMasterPublicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMasterPublicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMasterPublicKey::MergeFrom(const GetMasterPublicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMasterPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMasterPublicKey::CopyFrom(const GetMasterPublicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMasterPublicKey::IsInitialized() const {
  
  return true;
}

void GetMasterPublicKey::Swap(GetMasterPublicKey* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMasterPublicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMasterPublicKey_descriptor_;
  metadata.reflection = GetMasterPublicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterPublicKey::kKeyFieldNumber;
#endif  // !_MSC_VER

MasterPublicKey::MasterPublicKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterPublicKey::InitAsDefaultInstance() {
}

MasterPublicKey::MasterPublicKey(const MasterPublicKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterPublicKey::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterPublicKey::~MasterPublicKey() {
  SharedDtor();
}

void MasterPublicKey::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void MasterPublicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterPublicKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterPublicKey_descriptor_;
}

const MasterPublicKey& MasterPublicKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

MasterPublicKey* MasterPublicKey::default_instance_ = NULL;

MasterPublicKey* MasterPublicKey::New() const {
  return new MasterPublicKey;
}

void MasterPublicKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterPublicKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterPublicKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterPublicKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterPublicKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterPublicKey::MergeFrom(const MasterPublicKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterPublicKey::CopyFrom(const MasterPublicKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterPublicKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MasterPublicKey::Swap(MasterPublicKey* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterPublicKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterPublicKey_descriptor_;
  metadata.reflection = MasterPublicKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAddress::kAddressNFieldNumber;
#endif  // !_MSC_VER

GetAddress::GetAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAddress::InitAsDefaultInstance() {
}

GetAddress::GetAddress(const GetAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAddress::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAddress::~GetAddress() {
  SharedDtor();
}

void GetAddress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAddress_descriptor_;
}

const GetAddress& GetAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

GetAddress* GetAddress::default_instance_ = NULL;

GetAddress* GetAddress::New() const {
  return new GetAddress;
}

void GetAddress::Clear() {
  address_n_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_address_n())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_address_n;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 address_n = 1;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 address_n = 1;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->address_n(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAddress::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 address_n = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAddress::MergeFrom(const GetAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddress::CopyFrom(const GetAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddress::IsInitialized() const {
  
  return true;
}

void GetAddress::Swap(GetAddress* other) {
  if (other != this) {
    address_n_.Swap(&other->address_n_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAddress_descriptor_;
  metadata.reflection = GetAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kAddressFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadDevice::kSeedFieldNumber;
const int LoadDevice::kOtpFieldNumber;
const int LoadDevice::kPinFieldNumber;
const int LoadDevice::kSpvFieldNumber;
#endif  // !_MSC_VER

LoadDevice::LoadDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadDevice::InitAsDefaultInstance() {
}

LoadDevice::LoadDevice(const LoadDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadDevice::SharedCtor() {
  _cached_size_ = 0;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otp_ = true;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spv_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadDevice::~LoadDevice() {
  SharedDtor();
}

void LoadDevice::SharedDtor() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void LoadDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadDevice_descriptor_;
}

const LoadDevice& LoadDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

LoadDevice* LoadDevice::default_instance_ = NULL;

LoadDevice* LoadDevice::New() const {
  return new LoadDevice;
}

void LoadDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
    otp_ = true;
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    spv_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_otp;
        break;
      }
      
      // optional bool otp = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &otp_)));
          set_has_otp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }
      
      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_spv;
        break;
      }
      
      // optional bool spv = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spv_)));
          set_has_spv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seed(), output);
  }
  
  // optional bool otp = 2 [default = true];
  if (has_otp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->otp(), output);
  }
  
  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }
  
  // optional bool spv = 4 [default = true];
  if (has_spv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->spv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seed(), target);
  }
  
  // optional bool otp = 2 [default = true];
  if (has_otp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->otp(), target);
  }
  
  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }
  
  // optional bool spv = 4 [default = true];
  if (has_spv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->spv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadDevice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seed = 1;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
    // optional bool otp = 2 [default = true];
    if (has_otp()) {
      total_size += 1 + 1;
    }
    
    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
    // optional bool spv = 4 [default = true];
    if (has_spv()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadDevice::MergeFrom(const LoadDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_otp()) {
      set_otp(from.otp());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_spv()) {
      set_spv(from.spv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadDevice::CopyFrom(const LoadDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoadDevice::Swap(LoadDevice* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(otp_, other->otp_);
    std::swap(pin_, other->pin_);
    std::swap(spv_, other->spv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadDevice_descriptor_;
  metadata.reflection = LoadDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetDevice::kRandomFieldNumber;
#endif  // !_MSC_VER

ResetDevice::ResetDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetDevice::InitAsDefaultInstance() {
}

ResetDevice::ResetDevice(const ResetDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetDevice::SharedCtor() {
  _cached_size_ = 0;
  random_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetDevice::~ResetDevice() {
  SharedDtor();
}

void ResetDevice::SharedDtor() {
  if (random_ != &::google::protobuf::internal::kEmptyString) {
    delete random_;
  }
  if (this != default_instance_) {
  }
}

void ResetDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetDevice_descriptor_;
}

const ResetDevice& ResetDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

ResetDevice* ResetDevice::default_instance_ = NULL;

ResetDevice* ResetDevice::New() const {
  return new ResetDevice;
}

void ResetDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_random()) {
      if (random_ != &::google::protobuf::internal::kEmptyString) {
        random_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes random = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResetDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes random = 7;
  if (has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->random(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes random = 7;
  if (has_random()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->random(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetDevice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes random = 7;
    if (has_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->random());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetDevice::MergeFrom(const ResetDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_random()) {
      set_random(from.random());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDevice::CopyFrom(const ResetDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDevice::IsInitialized() const {
  
  return true;
}

void ResetDevice::Swap(ResetDevice* other) {
  if (other != this) {
    std::swap(random_, other->random_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetDevice_descriptor_;
  metadata.reflection = ResetDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignTx::kOutputsCountFieldNumber;
const int SignTx::kInputsCountFieldNumber;
const int SignTx::kRandomFieldNumber;
#endif  // !_MSC_VER

SignTx::SignTx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignTx::InitAsDefaultInstance() {
}

SignTx::SignTx(const SignTx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignTx::SharedCtor() {
  _cached_size_ = 0;
  outputs_count_ = 0u;
  inputs_count_ = 0u;
  random_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignTx::~SignTx() {
  SharedDtor();
}

void SignTx::SharedDtor() {
  if (random_ != &::google::protobuf::internal::kEmptyString) {
    delete random_;
  }
  if (this != default_instance_) {
  }
}

void SignTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignTx_descriptor_;
}

const SignTx& SignTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

SignTx* SignTx::default_instance_ = NULL;

SignTx* SignTx::New() const {
  return new SignTx;
}

void SignTx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    outputs_count_ = 0u;
    inputs_count_ = 0u;
    if (has_random()) {
      if (random_ != &::google::protobuf::internal::kEmptyString) {
        random_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 outputs_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outputs_count_)));
          set_has_outputs_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_inputs_count;
        break;
      }
      
      // required uint32 inputs_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inputs_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inputs_count_)));
          set_has_inputs_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_random;
        break;
      }
      
      // optional bytes random = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_random()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 outputs_count = 3;
  if (has_outputs_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->outputs_count(), output);
  }
  
  // required uint32 inputs_count = 5;
  if (has_inputs_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inputs_count(), output);
  }
  
  // optional bytes random = 6;
  if (has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->random(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignTx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 outputs_count = 3;
  if (has_outputs_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->outputs_count(), target);
  }
  
  // required uint32 inputs_count = 5;
  if (has_inputs_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->inputs_count(), target);
  }
  
  // optional bytes random = 6;
  if (has_random()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->random(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignTx::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 outputs_count = 3;
    if (has_outputs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outputs_count());
    }
    
    // required uint32 inputs_count = 5;
    if (has_inputs_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inputs_count());
    }
    
    // optional bytes random = 6;
    if (has_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->random());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignTx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignTx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignTx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignTx::MergeFrom(const SignTx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outputs_count()) {
      set_outputs_count(from.outputs_count());
    }
    if (from.has_inputs_count()) {
      set_inputs_count(from.inputs_count());
    }
    if (from.has_random()) {
      set_random(from.random());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignTx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignTx::CopyFrom(const SignTx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignTx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SignTx::Swap(SignTx* other) {
  if (other != this) {
    std::swap(outputs_count_, other->outputs_count_);
    std::swap(inputs_count_, other->inputs_count_);
    std::swap(random_, other->random_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignTx_descriptor_;
  metadata.reflection = SignTx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxRequest::kRequestIndexFieldNumber;
const int TxRequest::kRequestTypeFieldNumber;
const int TxRequest::kSignedIndexFieldNumber;
const int TxRequest::kSignatureFieldNumber;
const int TxRequest::kSerializedTxFieldNumber;
#endif  // !_MSC_VER

TxRequest::TxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxRequest::InitAsDefaultInstance() {
}

TxRequest::TxRequest(const TxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxRequest::SharedCtor() {
  _cached_size_ = 0;
  request_index_ = 0;
  request_type_ = 0;
  signed_index_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_tx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxRequest::~TxRequest() {
  SharedDtor();
}

void TxRequest::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (serialized_tx_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_tx_;
  }
  if (this != default_instance_) {
  }
}

void TxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxRequest_descriptor_;
}

const TxRequest& TxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

TxRequest* TxRequest::default_instance_ = NULL;

TxRequest* TxRequest::New() const {
  return new TxRequest;
}

void TxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_index_ = 0;
    request_type_ = 0;
    signed_index_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_serialized_tx()) {
      if (serialized_tx_ != &::google::protobuf::internal::kEmptyString) {
        serialized_tx_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 request_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_index_)));
          set_has_request_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_type;
        break;
      }
      
      // optional .RequestType request_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (RequestType_IsValid(value)) {
            set_request_type(static_cast< RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signed_index;
        break;
      }
      
      // optional int32 signed_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signed_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signed_index_)));
          set_has_signed_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }
      
      // optional bytes signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serialized_tx;
        break;
      }
      
      // optional bytes serialized_tx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_tx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_tx()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 request_index = 1;
  if (has_request_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request_index(), output);
  }
  
  // optional .RequestType request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->request_type(), output);
  }
  
  // optional int32 signed_index = 3;
  if (has_signed_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signed_index(), output);
  }
  
  // optional bytes signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->signature(), output);
  }
  
  // optional bytes serialized_tx = 5;
  if (has_serialized_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->serialized_tx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 request_index = 1;
  if (has_request_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request_index(), target);
  }
  
  // optional .RequestType request_type = 2;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->request_type(), target);
  }
  
  // optional int32 signed_index = 3;
  if (has_signed_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signed_index(), target);
  }
  
  // optional bytes signature = 4;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }
  
  // optional bytes serialized_tx = 5;
  if (has_serialized_tx()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->serialized_tx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 request_index = 1;
    if (has_request_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_index());
    }
    
    // optional .RequestType request_type = 2;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }
    
    // optional int32 signed_index = 3;
    if (has_signed_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signed_index());
    }
    
    // optional bytes signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }
    
    // optional bytes serialized_tx = 5;
    if (has_serialized_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_tx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxRequest::MergeFrom(const TxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_index()) {
      set_request_index(from.request_index());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_signed_index()) {
      set_signed_index(from.signed_index());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_serialized_tx()) {
      set_serialized_tx(from.serialized_tx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxRequest::CopyFrom(const TxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRequest::IsInitialized() const {
  
  return true;
}

void TxRequest::Swap(TxRequest* other) {
  if (other != this) {
    std::swap(request_index_, other->request_index_);
    std::swap(request_type_, other->request_type_);
    std::swap(signed_index_, other->signed_index_);
    std::swap(signature_, other->signature_);
    std::swap(serialized_tx_, other->serialized_tx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxRequest_descriptor_;
  metadata.reflection = TxRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxInput::kIndexFieldNumber;
const int TxInput::kAddressNFieldNumber;
const int TxInput::kAmountFieldNumber;
const int TxInput::kPrevHashFieldNumber;
const int TxInput::kPrevIndexFieldNumber;
const int TxInput::kScriptSigFieldNumber;
#endif  // !_MSC_VER

TxInput::TxInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxInput::InitAsDefaultInstance() {
}

TxInput::TxInput(const TxInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxInput::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  prev_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prev_index_ = 0u;
  script_sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxInput::~TxInput() {
  SharedDtor();
}

void TxInput::SharedDtor() {
  if (prev_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_hash_;
  }
  if (script_sig_ != &::google::protobuf::internal::kEmptyString) {
    delete script_sig_;
  }
  if (this != default_instance_) {
  }
}

void TxInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxInput_descriptor_;
}

const TxInput& TxInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

TxInput* TxInput::default_instance_ = NULL;

TxInput* TxInput::New() const {
  return new TxInput;
}

void TxInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_prev_hash()) {
      if (prev_hash_ != &::google::protobuf::internal::kEmptyString) {
        prev_hash_->clear();
      }
    }
    prev_index_ = 0u;
    if (has_script_sig()) {
      if (script_sig_ != &::google::protobuf::internal::kEmptyString) {
        script_sig_->clear();
      }
    }
  }
  address_n_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address_n;
        break;
      }
      
      // repeated uint32 address_n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_address_n())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_address_n;
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }
      
      // required uint64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prev_hash;
        break;
      }
      
      // required bytes prev_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prev_hash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prev_index;
        break;
      }
      
      // required uint32 prev_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prev_index_)));
          set_has_prev_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_script_sig;
        break;
      }
      
      // optional bytes script_sig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script_sig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // repeated uint32 address_n = 2;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->address_n(i), output);
  }
  
  // required uint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->amount(), output);
  }
  
  // required bytes prev_hash = 4;
  if (has_prev_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->prev_hash(), output);
  }
  
  // required uint32 prev_index = 5;
  if (has_prev_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prev_index(), output);
  }
  
  // optional bytes script_sig = 6;
  if (has_script_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->script_sig(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // repeated uint32 address_n = 2;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->address_n(i), target);
  }
  
  // required uint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->amount(), target);
  }
  
  // required bytes prev_hash = 4;
  if (has_prev_hash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->prev_hash(), target);
  }
  
  // required uint32 prev_index = 5;
  if (has_prev_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prev_index(), target);
  }
  
  // optional bytes script_sig = 6;
  if (has_script_sig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->script_sig(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required uint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }
    
    // required bytes prev_hash = 4;
    if (has_prev_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prev_hash());
    }
    
    // required uint32 prev_index = 5;
    if (has_prev_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prev_index());
    }
    
    // optional bytes script_sig = 6;
    if (has_script_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script_sig());
    }
    
  }
  // repeated uint32 address_n = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxInput::MergeFrom(const TxInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_prev_hash()) {
      set_prev_hash(from.prev_hash());
    }
    if (from.has_prev_index()) {
      set_prev_index(from.prev_index());
    }
    if (from.has_script_sig()) {
      set_script_sig(from.script_sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxInput::CopyFrom(const TxInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  
  return true;
}

void TxInput::Swap(TxInput* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    address_n_.Swap(&other->address_n_);
    std::swap(amount_, other->amount_);
    std::swap(prev_hash_, other->prev_hash_);
    std::swap(prev_index_, other->prev_index_);
    std::swap(script_sig_, other->script_sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxInput_descriptor_;
  metadata.reflection = TxInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TxOutput::kIndexFieldNumber;
const int TxOutput::kAddressFieldNumber;
const int TxOutput::kAddressNFieldNumber;
const int TxOutput::kAmountFieldNumber;
const int TxOutput::kScriptTypeFieldNumber;
const int TxOutput::kScriptArgsFieldNumber;
#endif  // !_MSC_VER

TxOutput::TxOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TxOutput::InitAsDefaultInstance() {
}

TxOutput::TxOutput(const TxOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TxOutput::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  script_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxOutput::~TxOutput() {
  SharedDtor();
}

void TxOutput::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void TxOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxOutput_descriptor_;
}

const TxOutput& TxOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bitkey_2eproto();  return *default_instance_;
}

TxOutput* TxOutput::default_instance_ = NULL;

TxOutput* TxOutput::New() const {
  return new TxOutput;
}

void TxOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    script_type_ = 0;
  }
  address_n_.Clear();
  script_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TxOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }
      
      // required string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_address_n;
        break;
      }
      
      // repeated uint32 address_n = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_address_n())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_address_n;
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }
      
      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_script_type;
        break;
      }
      
      // required .ScriptType script_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ScriptType_IsValid(value)) {
            set_script_type(static_cast< ScriptType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_script_args;
        break;
      }
      
      // repeated bytes script_args = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_script_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_script_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TxOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }
  
  // repeated uint32 address_n = 3;
  for (int i = 0; i < this->address_n_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->address_n(i), output);
  }
  
  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }
  
  // required .ScriptType script_type = 5;
  if (has_script_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->script_type(), output);
  }
  
  // repeated bytes script_args = 6;
  for (int i = 0; i < this->script_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->script_args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TxOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }
  
  // repeated uint32 address_n = 3;
  for (int i = 0; i < this->address_n_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->address_n(i), target);
  }
  
  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }
  
  // required .ScriptType script_type = 5;
  if (has_script_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->script_type(), target);
  }
  
  // repeated bytes script_args = 6;
  for (int i = 0; i < this->script_args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->script_args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TxOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }
    
    // required .ScriptType script_type = 5;
    if (has_script_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->script_type());
    }
    
  }
  // repeated uint32 address_n = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->address_n_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->address_n(i));
    }
    total_size += 1 * this->address_n_size() + data_size;
  }
  
  // repeated bytes script_args = 6;
  total_size += 1 * this->script_args_size();
  for (int i = 0; i < this->script_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->script_args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TxOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TxOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxOutput::MergeFrom(const TxOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  address_n_.MergeFrom(from.address_n_);
  script_args_.MergeFrom(from.script_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_script_type()) {
      set_script_type(from.script_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TxOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxOutput::CopyFrom(const TxOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void TxOutput::Swap(TxOutput* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(address_, other->address_);
    address_n_.Swap(&other->address_n_);
    std::swap(amount_, other->amount_);
    std::swap(script_type_, other->script_type_);
    script_args_.Swap(&other->script_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TxOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxOutput_descriptor_;
  metadata.reflection = TxOutput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
